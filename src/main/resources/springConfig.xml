<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:c="http://www.springframework.org/schema/c"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop.xsd
       http://www.springframework.org/schema/util
       http://www.springframework.org/schema/util/spring-util.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context-3.0.xsd"

       default-init-method="init"
       default-destroy-method="destroy"> <!--default-autowire="byName"-->

  <context:annotation-config/>
  <context:component-scan base-package="it.academy"/>

  <bean id="address" class="it.academy.Address" scope="prototype"
        p:street="Kazintsa"
        p:home="25"
        p:email="aluor@mail.ru">
    <property name="offices">
      <list>
        <value>5</value>
        <value>7</value>
        <value>9</value>
      </list>
    </property>
    <!--
    <set> могут применяться java.util.Set,
    java.util.Collection или Array (например String[])
    Вместо <value> можно указывать бин (тег <bean> - для
    анонимного бина) или <ref-bean> - для существующего
    в контексте бина
    -->
    <property name="officeNames">
      <list>
        <value>"SuperOffice"</value>
        <value>"MegaOffice"</value>
        <value>"SpaceOffice"</value>
      </list>
    </property>
  </bean>

  <!--типизатор Т для статического импорта.
  address.street?.toUpperCase() - если адрес null - toUpperCase не вызовется.
  Оператор Элвиса - adress.getStreet()?:'нет адреса'-->

 <!-- <bean id="person" class="it.academy.Person" scope="prototype"
        p:kazintsa="#{address.street.equals('Kazintsa')}"
        p:hasStreet="#{address.street?.toUpperCase()!=''?true:false}"
        p:age="#{T(java.lang.Math).PI}"
        p:name="#{mapBean.getMapContent().get(30)}"
        p:address-ref="address"/>  замаплено аннотациями -->

  <bean id="mapBean" class="it.academy.MapBean" scope="prototype">
    <property name="mapContent">
      <map>
        <entry key="10" value="Not bad"/>
        <entry key="20" value="Good"/>
        <entry key="30" value="Well done!"/>
      </map>
    </property>
  </bean>

  <!--
  key – определяет ключ как String
  key-ref – определяет ссылку на bean, который
  используется в качестве ключа
  value – определяет значение как String
  value-ref – определяет ссылку на bean, который
  используется в качестве значения
  -->

  <bean id="propertyBean" class="it.academy.PropertyBean" scope="prototype">
    <property name="properties">
      <props>
        <prop key="Корабль">Ship</prop>
        <prop key="Самолет">Plane</prop>
        <prop key="Машина">Car</prop>
      </props>
    </property>
  </bean>

  <bean id="constructorBean" class="it.academy.ConstructorBean" c:_0="myConstructorBeanName">
    <!-- или  можно так <constructor-arg name="constructorBeanName" index="0" value="myConstructorBeanName"/>-->
  </bean>

  <bean id="nullValueBean" class="it.academy.NullValueBean">
    <property name="value">
      <null/>
    </property>
  </bean>

  <!--создание бинов, содержащих коллекции-->
 <!-- <bean id="collectionBean" class="it.academy.CollectionBean">
    <property name="persons">
      <list>
        <bean class="it.academy.Person" scope="prototype"
              p:kazintsa="#{address.street.equals('Kazintsa')}"
              p:age="25"
              p:name="#{mapBean.getMapContent().get(20)}"
              p:address-ref="address"/>

        <bean class="it.academy.Person" scope="prototype"
              p:kazintsa="#{address.street.equals('Kazintsa')}"
              p:age="40"
              p:name="#{mapBean.getMapContent().get(10)}"
              p:address-ref="address"/>
      </list>
    </property>
  </bean>-->

  <!--использование EL в коллекциях-->
 <!-- <util:list id="people">
    <bean class="it.academy.Person" p:id="1" p:name="Igor" p:surname="Aliushkevich"/>
    <bean class="it.academy.Person" p:id="2" p:name="Andrey" p:surname="Dovnar"/>
    <bean class="it.academy.Person" p:id="3" p:name="Petr" p:surname="Fokin"/>
  </util:list>

  <bean id="person1" class="it.academy.Person"
        p:name="#{people[0].name}" p:surname="#{people[0].surname}"/>

  <bean id="person2" class="it.academy.Person"
        p:name="#{people[1].name}" p:surname="#{people[1].surname}"/>-->

  <!--Итоговый пример использования EL
  (collectionBean.persons.![name] - срез по именам в коллекции)
  (people.?[id gt 2] - логическое условие)
  (people.^[id gt 1] - получение 1-го элемента)
  (people.$[id gt 1] - получение последнего элемента)
  TODO: Почему все, что берем у Address д.б. прописано в IAddress, иначе бин не создается?-->
  <!--<bean id="expressionBean" class="it.academy.ExpressionBean"
        p:piValue="#{T(java.lang.Math).PI}"
        p:someText="#{'Hello world!'}"
        p:someCount="#{T(java.lang.Math).PI*45/12}"
        p:emailLogic="#{address.email matches '[A-Za-z0-9+_.-]+@[a-zA-Z0-9.-]+'}"
        p:personNames="#{collectionBean.persons.![name]}"
  />-->

  <!--AutoWired by annotation-->
  <bean id="personAutoWired" class="it.academy.PersonAutoWired" scope="prototype"
        p:name="IgorAutoWired"/>

  <bean id="personAutoWiredConstr" class="it.academy.PersonAutoWiredConstr" scope="prototype"
        p:name="PavelAutoWiredConstr"
        autowire="constructor"/>


  <!--AutoWiring byType-->
  <!--Вместо primary="true" (только для нужного) можно ставить для нужного к связыванию autowire-candidate="true" (но в этом случае - для остальных
 придется ставить autowire-candidate="false"-->
  <bean id="address2" class="it.academy.Address2" scope="prototype"
        p:street="Lermontova"
        p:home="116"
        p:email="werdan@yahoo.com">
  </bean>




  <bean id="notifier" class="it.academy.Notifier"/>

  <aop:config>
    <aop:aspect ref="notifier">
      <aop:pointcut id="advice" expression="execution(* *.getStreet(..))"/>
      <aop:before pointcut-ref="advice" method="notifyBefore"/>
      <aop:after pointcut-ref="advice" method="notifyAfter"/>
    </aop:aspect>
  </aop:config>

</beans>
